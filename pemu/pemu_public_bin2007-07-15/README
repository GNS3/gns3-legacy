How to use

This Version can be compiled on Linux and Windows/MinGW, but direct support
from author is provided only for linux version.
Some features are not available on windows See bellow for more details
This version requires 32 bit CPU (or 64Bit CPU in 32 bit mode)

Compile from source on linux,
Required - gcc3.4 - qemu is not compatible with gcc 4.x, so you will need
3.x.
1. Edit Make file, and customize lines
CC=gcc-3.4
HOST_CC=gcc-3.4
CC specifies gcc-3.4 executable - in some systems it could be just gcc.

2. Type "make"
Try to ignore warnings.
If you are lucky, it may compile, if not, try using compiled version

Compile from source on Windows
Requires MinGw and eventually some other libs and header (like libz)
edit Makefile and uncomment line
CONFIG_WIN32=YES
change CC and HOST_CC lines to 
CC=gcc
HOST_CC=gcc

start cmd
change to directory where source is extracted
type set PATH=%PATH%;c:\mingw\bin
type mingw32-make
if it complains about some missing .h files or libs, download them from
somewhere and put them in proper directories (I used libz.a and headers from
cygwin and it seems to work)

So you either compiled from source or decided to use binary version, how
to use for first time:

1. Prepare flash file, execute following command:
dd if=/dev/zero of=FLASH bs=1k count=16k (or if you are windows uset, 
copy provided FLASH.empty to FLASH)
2. Download PIXOS image from somewhere, it is tested with 6.35, 7.22 and 8.02
3. There is no need to uncompress image (as it was in older version).

edit pemu.ini, it should look like:
-----
serial=0x12345678  <--- PUT Your Serial Number here
image=pix722.bin   <--- PUT YOUR PIXOS image name here
key=0x00000000,0x00000000,0x00000000,0x00000000 <--- PUT AC if You USE 6.x 
bios1=mybios_d8000
bios2=bios.bin
bios_checksum=1
-----
if you already have image installed in flash, edit the second line to:
image=NONE
Copy Serial No and key from your existing pix, and save file
Activation Key, set in pemu.ini is used only for PIXOS 6.x version!,
For PIXOS 7.x and 8.x, key should be entered with activation-key command

You should Use Serial No and activation key from existing pix. PIX model 
in not important. E.g. You can use SN and AC from pix 501, 506, 515, etc.
Serial Numbers and keys from ASA are not compatible.
If You have bioses from original PIX, put them in corresponding BIOS lines.
This will allow practicing password recobery and real bix bootup process,
but will not allow loading of image specified with "image=". Original BIOS
can load PIXOS via tftp

Virtual network interfaces can implemented in following ways:
On Linux 
  1. Using linux TAP interfaces - tap
  2. Using direct connection to physical interface - lcap
  3. Using UDP packets to send ethernet frames - udp
  4. Using direct connection to physical interface - pcap (by default this
     is not compiled)
On Windows
  1. Using windows tap interfaces (Sorry, I personaly can't help you there,
     check some forums for more info)
  2. Using UDP packets to send ethernet frames - udp

Interfaces are specified with following option:
-net nic,vlan=1,macaddr=00:aa:00:00:02:01
Up to 5 interfaces can be created.
Mac addresses should be different for each interface, and each pix 
connected to network.

Each of these options (-net nic ...) is paired with second option, specifying
how the virtual interface is implemented (tap, lcap, udp, pcap)

1. Using TAP interfaces on linux
Edit ifup.ini to configure how interfaces are initialized it should look 
like this:
------
tap0 10.0.0.1 255.255.255.0
tap1 10.1.0.1 255.255.255.0
tap2 10.2.0.1 255.255.255.0
tap3 10.3.0.1 255.255.255.0
tap4 bridge eth0
------
Tap interfaces are connected to virtual interface using option like this
"-net tap,vlan=1,ifname=tap1,script=ifup"
vlan parameter correspond to virtual interface (created with -net nic)
script=ifup is name of the script that initializes interfaces
ifname=tap1 specifies interface name
Tap interfaces could be routed or bridged via HOST OS.
Bridging can be done with included program "bridge" or with linux kernel
bridging (with custom ifup script, or manually after pemu is started)

2. Direct connection to eth interface (lcap), it should be specified with 
option like this:  (only in linux)
"-net lcap,vlan=1,ifname=eth0"
Vlan parameter correspond to virtual interface (created with -net nic)
ifname=... specifies interface to connect to.
WARNING - using this method will not allow traffic to/from host machine via
this interface

3. Using UDP packet sending - on linux and Windows
Interfaces are specified using 
"-net udp,vlan=1,sport=SOURCE_PORT,dport=DEST_PORT,daddr=DES_IP"
Vlan parameter correspond to virtual interface (created with -net nic)
sport specifies source port (and port to listen to)
dport specifies destionation port - where packets are send
daddr specifies destionation IP address
Using this option pemu can be directly connected to dynamips, there will be
explanation about this in forums

4. Using pcap on linux - it is identical to lcap (but using pcap).
In some cases this could be faster that lcap, as pcap lib does some
buffering on captured packets

Emulator should be started with command like this
./pemu \
  -net nic,vlan=1,macaddr=00:aa:00:00:02:01 -net tap,vlan=1,script=ifup\
  -net nic,vlan=2,macaddr=00:aa:00:00:02:02 -net pcap,vlan=2,ifname=eth1\
  -net nic,vlan=3,macaddr=00:aa:00:00:02:03 -net lcap,vlan=3,ifname=eth0\
  -net nic,vlan=4,macaddr=00:aa:00:00:02:04 \
      -net udp,sport=2000,dport=2001,daddr=127.0.0.1\
  -serial stdio\
  -m 128\
  FLASH

or in windows - \
pemu.exe ... (everything on same line)
-serial stdio doesn't work on windows (see bellow for alternatives)

Amount of RAM for emulated pix is specified with -m option
for pixos 6.x -m 32 should be enough
for pixos 7.x and 8.x -m 128 is required (some earlier 7.0 version can run
restricted software with 64 RAM)
WARNING choose number that looks like possible amount of RAM e.g.
16,32,64,128,192,256 ....

The latest argument is FLASH image file. If you run several PIX instances,
from same directory, different FLASH images should be chosen, as it is not
recommended for several processes to write to one file

serial console is specified with -serial parameter
tested options are
-serial stdio - it will send all traffic to stdio (only on linux)
-serial telnet::PORT,server,nowait - in this case serial console is
accessible with command "telnet localhost PORT" (replace "PORT" which any
number between 1024 and 65536)
There are other ways of using -serial option - check qemu documentation for
more info

Program is terminated with pressing ctrl-c, on terminal where it is started
(which could be annoying if using -serial stdio)

There is no official web page for this software. If you have any questions,
ask them in HACKI FORUM - http://7200emu.hacki.at/
It seems also that there is Chinese forum about pemu, if you can read
Chinese try this: http://www.netemu.cn

NOTE: This linux/windows version is different from old Windows version
(which was based on old pemu version) Some of features available on old
windows version are not available on this version.
